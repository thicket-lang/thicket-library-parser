/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Parser.Genlex

from Data.Unit import unit
from Data.String import string
from Data.Number import number
from Data.Character import char
from Data.List import list, emptyList, list2sequence
from Data.Sequence import Sequence
from Data.Option import option
from Data.Try import try
from Parser.LL import *

model GenlexFactory[a] {
    keyword : string -> a
    ident   : string -> a
    number  : number -> a
    string  : string -> a 
    char    : char   -> a
}

class genlex keywords:option[list[string]] {

    generate : [b] Sequence[char] -> GenlexFactory[b] -> try[Sequence[b]]
    
} {
    //
    // Private behaviors
    //

    def space : Parser[char,char] =
        satisfy $ c -> "\n\r\f " indexOf c present

    def spaces : Parser[unit,char] =
        self.space* map (_ -> ())

    def keyword : [b] GenlexFactory[b] -> Parser[b,char] = t ->
        keywords orElse emptyList foldR (k p -> aString k | p) error map t.keyword

    def ident : [b] GenlexFactory[b] -> Parser[b,char] = t ->
        letter ~ (aChar '_' | letter | digit *) 
        map (r -> t.ident $ r._2 orElse emptyList +: r._1 mkString char::toString "")

    def string : [b] GenlexFactory[b] -> Parser[b,char] = t ->
        stringLiteral map t.string

    def char : [b] GenlexFactory[b] -> Parser[b,char] = t ->
        charLiteral map t.char
    
    def number : [b] GenlexFactory[b] -> Parser[b,char] = t ->
        numberLiteral map t.number

    def token : [b] GenlexFactory[b] -> Parser[b,char] = t ->
        (self.keyword t) | (self.ident t) | (self.number t) | (self.string t) | (self.char t)

    def tokens : [b] GenlexFactory[b] -> Parser[Sequence[b],char] = t ->
        self.spaces ~> ((self.token t) <~ self.spaces *) <~ eos
        map (o -> list2sequence $ o orElse emptyList)

    //
    // Public behaviors
    //

    def generate s t = self.tokens t parse s 0 toTry

}
