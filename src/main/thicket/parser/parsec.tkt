/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
 /*
  * Parsec: Direct Style Monadic Parser Combinators For The Real World
  * 
  * http://research.microsoft.com/en-us/um/people/daan/download/papers/parsec-paper.pdf
  */
 
module Parser.LL
 
from Data.Unit import unit
from Data.String import string
from Data.Number import number
from Data.Boolean import bool, false, true
from Data.Character import char
from Data.Pair import Pair
from Data.List import list, emptyList
from Data.Option import option, some, none
from Data.Try import try, success, failure, try2option
from Data.Sequence import Sequence
from Data.Monadic import Monadic
from Data.Comparable import Comparable

from Lang.Do import do

from System.Console import console
 
type Response[a,c] {
    model Accept { 
        value    : a 
        input    : Sequence[c] 
        offset   : number 
        consumed : bool 
    }
    model Reject { 
        offset   : number 
        consumed : bool 
    }
}

//
// Fold functionalities
//

class response[a,c] this:Response[a,c] {
    with Monadic[[a]response[a,c],a]
    
    unbox : Response[a,c]
    
    toOption : option[a]
    toTry    : try[a]
    
    fold : [b] (a -> Sequence[c] -> number -> bool -> b) -> (number -> bool -> b) -> b
} {
    def unbox = this

    def Accept.map f = accept (f this.value) this.input this.offset this.consumed
    def Reject.map f = reject this.offset this.consumed

    def Accept.flatmap f = f this.value
    def Reject.flatmap f = reject this.offset this.consumed

    def Accept.filter f = f this.value fold self $ reject this.offset false
    def Reject.filter f = reject this.offset false

    def toOption = try2option $ self toTry

    def Accept.toTry = success this.value
    def Reject.toTry = failure $ responsePrettyPrinter this toString

    def Accept.fold c _ = c this.value this.input this.offset this.consumed
    def Reject.fold _ e = e this.offset this.consumed
}

class responsePrettyPrinter[a,c] this:Response[a,c] {
    toString : string
} {
    def Accept.toString = $"Accepted[$(this.offset),$(this.consumed)]"
    def Reject.toString = $"Rejected[$(this.offset),$(this.consumed)]"
}

def accept : [a,c] a -> Sequence[c] -> number -> bool -> response[a,c] = a s n b -> {
    response $ Accept a s n b
}

def reject : [a,c] number -> bool -> response[a,c] = n b -> {
    response $ Reject n b
}

//
// Parser trait definition
//

trait Parser[a,c] {
    with Monadic[[a]Parser[a,c],a]
    
    match : Comparable[a] -> Parser[a,c]
    
    parse : Sequence[c] -> number -> response[a,c]

    (~)   : [b] Parser[b,c] -> Parser[(a,b),c] 
    (~>)  : [b] Parser[b,c] -> Parser[b,c] 
    (<~)  : [b] Parser[b,c] -> Parser[a,c] 
    (+)   : Parser[list[a],c]
    (?)   : Parser[option[a],c]
    (*)   : Parser[option[list[a]],c]
    (|)   : Parser[a,c] -> Parser[a,c]
    
} {
    // 
    // Private behaviors
    // 

    def lazy : [b] Parser[b,c] -> Parser[b,c] =  do { } return

    def bind : [b] (a -> Parser[b,c]) -> Parser[b,c] = f ->
         parser $ input index ->
            self parse input index fold 
                (a input index consumed -> f a parse input index fold
                    (a input index consumed' -> 
                        accept a input index $ consumed || consumed'
                    )
                    (offset consumed' -> 
                        reject offset $ consumed || consumed'
                    )
                )
                reject        

    def choice : Parser[a,c] -> Parser[a,c] = q ->
        parser $ input index ->
            self parse input index fold 
                accept
                (offset consumed -> consumed fold 
                    { reject offset consumed } 
                    { q parse input index }
                )
                
    // 
    // Public behaviors
    // 

    def flatmap   = self bind
    def map     f = parser $ s n -> self parse s n map f
    def filter  p = parser $ s n -> self parse s n filter p
    def match   v = self filter (v==)

    def (~)  p = self flatmap $ a -> p map $ b -> (a,b)
    def (~>) p = self ~ p map (r -> r._2)
    def (<~) p = self ~ p map (r -> r._1)
    def (|)    = self choice
    def (+)    = self ~ (self.lazy $ self *) map $ r -> r._2 orElse emptyList +: r._1
    def (?)    = self map some | (return none)
    def (*)    = self + ? 
}

class parser[a,c] this:Sequence[c] -> number -> response[a,c] {
    with Parser[a,c]
} {
    def parse = this
}

def trace : [a,c] string -> Parser[a,c] -> Parser[a,c] = s -> {
    do {
        console.log s
    } return
}
        
//
// Basic parsers
//

def return : [a,c] a -> Parser[a,c] = a -> {
    parser $ input index -> 
        accept a input index false
}

def error : [a,c] Parser[a,c] = {
    parser $ input index -> reject index false
}

def eos : [c] Parser[unit,c] = {
    parser $ input index -> 
        input length == index fold 
        (accept () input index false)
        (reject index false)
}

def satisfy : [a,a] (a -> bool) -> Parser[a,a] = test -> {
    parser $ input index ->
        { for c <- { input get index } 
          if (test c) 
          yield accept c input (index++) true
        } orElse (reject index false) 
}

def try : [a,b] Parser[a,b] -> Parser[a,b] = p -> {
    parser $ input index -> 
        p parse input index fold 
            accept
            (offset consumed -> reject offset false)
}

def digit : Parser[char,char] = { 
    satisfy $ c -> ('0' <= c) && (c <= '9') 
} 

def lowerCase : Parser[char,char] = { 
    satisfy $ c -> ('a' <= c) && (c <= 'z') 
} 

def upperCase : Parser[char,char] = { 
    satisfy $ c -> ('A' <= c) && (c <= 'Z') 
} 

def letter : Parser[char,char] = {
    lowerCase | upperCase
}

def notChar : char -> Parser[char,char] = c -> {
    satisfy (c!=)
} 

def aChar : char -> Parser[char,char] = c -> {
    satisfy (c==)
} 

def charLiteral : Parser[char,char] = {
    let anyChar = (aChar '\\' ~> $ aChar '\'') | (notChar '\'') in 
        (aChar '\'') ~> anyChar <~ (aChar '\'')
}

def stringLiteral : Parser[string,char] = {
    let anyChar = (aChar '\\' ~> $ aChar '"') | (notChar '"') in 
        (aChar '"') ~> (anyChar*) <~ (aChar '"') map
        $ o -> o fold "" $ l -> l mkString char::toString ""
}

def numberLiteral : Parser[number,char] = {
    digit+ map 
    $ l -> l mkString char::toString "" toNumber fold 0 (r -> r)
}

def aString : string -> Parser[string,char] = w -> {
    parser $ input offset ->
        w subStringAt input offset fold
        (accept w input (w length + offset) true)
        (reject offset false)
}
